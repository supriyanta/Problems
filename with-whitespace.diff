diff --git a/.coafile b/.coafile
new file mode 100644
index 0000000..39c1766
--- /dev/null
+++ b/.coafile
@@ -0,0 +1,14 @@
+# Generated by coala-quickstart on 04 Nov 2017.
+[default]
+bears = FilenameBear, coalaBear, InvalidLinkBear
+files = **.cpp, **.yml, **.py
+ignore = 
+[python]
+bears = PycodestyleBear
+files = **.py
+[c++]
+bears = CPPCleanBear, CPPCheckBear, ClangComplexityBear, GNUIndentBear
+files = **.cpp
+[yaml]
+bears = LineLengthBear, YAMLLintBear
+files = **.yml
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e69de29
diff --git a/coala-ci.log b/coala-ci.log
new file mode 100644
index 0000000..2d5006f
--- /dev/null
+++ b/coala-ci.log
@@ -0,0 +1,1496 @@
+Executing section Default...
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/Insert Node at given position in Linked List index start with 0.cpp
+|    |++++| b/Linked List/insert_node_at_given_position_in_linked_list_index_start_with_0.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/insert Node at the end of LINKED LIST.cpp
+|    |++++| b/Linked List/insert_node_at_the_end_of_l_i_n_k_e_d_l_i_s_t.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/Reverse the Linked List.cpp
+|    |++++| b/Linked List/reverse_the_linked_list.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Functions/copy replace fill.cpp
+|    |++++| b/Functions/copy_replace_fill.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/Insert node at given position in Linked List index start with 1.cpp
+|    |++++| b/Linked List/insert_node_at_given_position_in_linked_list_index_start_with_1.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/Delete Node from given position in Linked List.cpp
+|    |++++| b/Linked List/delete_node_from_given_position_in_linked_list.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/insert value at the beginning of Linked List 3216.cpp
+|    |++++| b/Linked List/insert_value_at_the_beginning_of_linked_list_3216.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Bytelandian gold coins/Bytelandian gold coins .cpp
+|    |++++| b/Bytelandian gold coins/bytelandian_gold_coins_.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Linked List/Linked List.cpp
+|    |++++| b/Linked List/linked_list.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Functions/2D Vector Pair.cpp
+|    |++++| b/Functions/2_d_vector_pair.cpp
+|    | [NORMAL] FilenameBear:
+|    | Filename does not follow snake naming-convention.
+|----|    | a/Bytelandian gold coins/Bytelandian gold coins .py
+|    |++++| b/Bytelandian gold coins/bytelandian_gold_coins_.py
+
+.travis.yml
+|  12| ••#•Create•two•diff•files,•and•upload•to•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  17| ••-•cat•sans-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  19| ••-•cat•with-whitespace.diff•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  20| ••#•Upload•logs•to•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+
+.travis.yml
+|  21| ••-•cat•coala-ci.log•|•curl•-F•'clbin=<-'•https://clbin.com
+|    | [NORMAL] InvalidLinkBear:
+|    | Broken link - unable to connect to https://clbin.com (HTTP Error: 404)
+Executing section python...
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   3| »   if(n<12):
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   3| »   if(n<12):
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   4| »   »   return•n;
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   4| »   »   return•n;
+|    | [NORMAL] PycodestyleBear (E703):
+|    | E703 statement ends with a semicolon'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   5| »   if•n//4>1000000•:
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   5| »   if•n//4>1000000•:
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   5| »   if•n//4>1000000•:
+|    | [NORMAL] PycodestyleBear (E203):
+|    | E203 whitespace before ':''
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   6| »   »   n_by2=rec(n//2)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   6| »   »   n_by2=rec(n//2)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   7| »   »   n_by3=rec(n//3)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   7| »   »   n_by3=rec(n//3)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   8| »   »   n_by4=rec(n//4)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   8| »   »   n_by4=rec(n//4)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   9| »   »   sum=n_by2+n_by3+n_by4
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|   9| »   »   sum=n_by2+n_by3+n_by4
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  10| »   »   if(sum<=n):
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  10| »   »   if(sum<=n):
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  11| »   »   »   return•n
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  12| »   »   return•sum
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  16| »   if•a[n//2]==0:
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  16| »   if•a[n//2]==0:
+|    | [NORMAL] PycodestyleBear (E303):
+|    | E303 too many blank lines (3)'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  16| »   if•a[n//2]==0:
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  17| »   »   a[n//2]=rec(n//2)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  17| »   »   a[n//2]=rec(n//2)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  18| »   if•a[n//3]==0:
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  18| »   if•a[n//3]==0:
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  19| »   »   a[n//3]=rec(n//3)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  19| »   »   a[n//3]=rec(n//3)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  20| »   if•a[n//4]==0:
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  20| »   if•a[n//4]==0:
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  21| »   »   a[n//4]=rec(n//4)
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  21| »   »   a[n//4]=rec(n//4)
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  22| »   sum=a[n//2]•+•a[n//3]•+•a[n//4]
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  22| »   sum=a[n//2]•+•a[n//3]•+•a[n//4]
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  23| »   if(sum<=n):
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  23| »   if(sum<=n):
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  24| »   »   return•n
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  25| »   return•sum
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  26| for•i•in•range(10):
+|    | [NORMAL] PycodestyleBear (E305):
+|    | E305 expected 2 blank lines after class or function definition, found 0'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  27| »   n=10
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  27| »   n=10
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  28| »   n=int(input())
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  28| »   n=int(input())
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  29| »   a=[0]*10000003
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  29| »   a=[0]*10000003
+|    | [NORMAL] PycodestyleBear (E225):
+|    | E225 missing whitespace around operator'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  30| »   print(rec(n))
+|    | [NORMAL] PycodestyleBear (W191):
+|    | W191 indentation contains tabs'
+
+Bytelandian gold coins/Bytelandian gold coins .py
+|  32| 
+|    | [NORMAL] PycodestyleBear (W391):
+|    | W391 blank line at end of file'
+Executing section c++...
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Linked List.cpp
+|    |++++| /app/Linked List/Linked List.cpp
+|   2|   2| #include<stdlib.h>
+|   3|   3| struct node
+|   4|   4| {
+|   5|    |-	int data;
+|   6|    |-	struct node* next;
+|    |   5|+    int data;
+|    |   6|+    struct node *next;
+|   7|   7| };
+|   8|    |-void insert(int);
+|   9|    |-void print(void);
+|    |   8|+void insert (int);
+|    |   9|+void print (void);
+|  10|  10| 
+|  11|    |-struct node* head;
+|    |  11|+struct node *head;
+|  12|  12| 
+|  13|    |-int main()
+|    |  13|+int
+|    |  14|+main ()
+|  14|  15| {
+|  15|    |-	head=NULL;
+|  16|    |-	int no,i;
+|  17|    |-	printf("how many nos?\n");
+|  18|    |-	scanf("%d",&no);
+|  19|    |-	for(i=0;i<no;i++)
+|  20|    |-	{
+|  21|    |-		int x;
+|  22|    |-		printf("Enter a no: ");
+|  23|    |-		scanf("%d",&x);
+|  24|    |-		insert(x);
+|  25|    |-		print();
+|  26|    |-	}
+|  27|    |-			
+|  28|    |-	return 0;
+|    |  16|+    head = NULL;
+|    |  17|+    int no, i;
+|    |  18|+    printf ("how many nos?\n");
+|    |  19|+    scanf ("%d", &no);
+|    |  20|+    for (i = 0; i < no; i++)
+|    |  21|+      {
+|    |  22|+          int x;
+|    |  23|+          printf ("Enter a no: ");
+|    |  24|+          scanf ("%d", &x);
+|    |  25|+          insert (x);
+|    |  26|+          print ();
+|    |  27|+      }
+|    |  28|+
+|    |  29|+    return 0;
+|  29|  30| }
+|  30|    |-void insert(int no)
+|    |  31|+void
+|    |  32|+insert (int no)
+|  31|  33| {
+|  32|    |-	node* temp=(node*) malloc(sizeof(node));
+|  33|    |-	temp->data=no;
+|  34|    |-	(*temp).next=head;
+|  35|    |-	head=temp;
+|  36|    |-	
+|    |  34|+    node *temp = (node *) malloc (sizeof (node));
+|    |  35|+    temp->data = no;
+|    |  36|+    (*temp).next = head;
+|    |  37|+    head = temp;
+|    |  38|+
+|  37|  39| }
+|  38|    |-void print()
+|    |  40|+void
+|    |  41|+print ()
+|  39|  42| {
+|  40|    |-	struct node* temp=head;
+|  41|    |-	printf("List is---    ");
+|  42|    |-	while(temp!=NULL)
+|  43|    |-	{
+|  44|    |-	//	temp=temp->next;
+|  45|    |-		printf("%d   ",temp->data);
+|  46|    |-		temp=temp->next;
+|  47|    |-	}
+|  48|    |-	printf("\n");
+|    |  43|+    struct node *temp = head;
+|    |  44|+    printf ("List is---    ");
+|    |  45|+    while (temp != NULL)
+|    |  46|+      {
+|    |  47|+          //  temp=temp->next;
+|    |  48|+          printf ("%d   ", temp->data);
+|    |  49|+          temp = temp->next;
+|    |  50|+      }
+|    |  51|+    printf ("\n");
+|  49|  52| }
+
+Linked List/Linked List.cpp
+|  30| void•insert(int•no)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+
+Linked List/Linked List.cpp
+|  38| void•print()
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+
+Linked List/Linked List.cpp
+|  11| struct•node*•head;
+|    | [NORMAL] CPPCleanBear:
+|    | static data 'head'
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Insert Node at given position in Linked List index start with 0.cpp
+|    |++++| /app/Linked List/Insert Node at given position in Linked List index start with 0.cpp
+|   2|   2| #include<cstdlib>
+|   3|   3| using namespace std;
+|   4|   4| 
+|   5|    |-struct Node{
+|   6|    |-	int data;
+|   7|    |-	Node* next;
+|    |   5|+struct Node
+|    |   6|+{
+|    |   7|+    int data;
+|    |   8|+    Node *next;
+|   8|   9| };
+|   9|    |-void print(Node*);
+|  10|    |-Node* InsertNth(Node* head,int data,int n)
+|    |  10|+void print (Node *);
+|    |  11|+Node *
+|    |  12|+InsertNth (Node * head, int data, int n)
+|  11|  13| {
+|  12|    |-    Node* temp=(Node*)malloc(sizeof(Node));
+|  13|    |-	temp->data=data;
+|  14|    |-	temp->next=NULL;
+|  15|    |-	
+|  16|    |-	if(n==0)
+|  17|    |-	{
+|  18|    |-		temp->next=head;
+|  19|    |-		head=temp;
+|  20|    |-		return head;
+|  21|    |-	}
+|  22|    |-	Node* temp1=head;
+|  23|    |-	for(int i=1;i<n;i++)
+|  24|    |-	{
+|  25|    |-		temp1=temp1->next;
+|  26|    |-	}
+|  27|    |-	temp->next=temp1->next;
+|  28|    |-	temp1->next=temp;
+|  29|    |-	return head;
+|    |  14|+    Node *temp = (Node *) malloc (sizeof (Node));
+|    |  15|+    temp->data = data;
+|    |  16|+    temp->next = NULL;
+|    |  17|+
+|    |  18|+    if (n == 0)
+|    |  19|+      {
+|    |  20|+          temp->next = head;
+|    |  21|+          head = temp;
+|    |  22|+          return head;
+|    |  23|+      }
+|    |  24|+    Node *temp1 = head;
+|    |  25|+    for (int i = 1; i < n; i++)
+|    |  26|+      {
+|    |  27|+          temp1 = temp1->next;
+|    |  28|+      }
+|    |  29|+    temp->next = temp1->next;
+|    |  30|+    temp1->next = temp;
+|    |  31|+    return head;
+|  30|  32| }
+|  31|    |-int main()
+|    |  33|+int
+|    |  34|+main ()
+|  32|  35| {
+|  33|    |-	Node* head=NULL;
+|  34|    |-	int t;
+|  35|    |-	cin>>t;
+|  36|    |-	for(int j=0;j<t;j++)
+|  37|    |-	{
+|  38|    |-		int data,no;
+|  39|    |-		scanf("%d %d",&data,&no);
+|  40|    |-		head=insert(head,data,no);
+|  41|    |-		print(head);	
+|  42|    |-		cout<<endl;
+|  43|    |-	}
+|  44|    |-	
+|  45|    |-	return 0;
+|    |  36|+    Node *head = NULL;
+|    |  37|+    int t;
+|    |  38|+    cin >> t;
+|    |  39|+    for (int j = 0; j < t; j++)
+|    |  40|+      {
+|    |  41|+          int data, no;
+|    |  42|+          scanf ("%d %d", &data, &no);
+|    |  43|+          head = insert (head, data, no);
+|    |  44|+          print (head);
+|    |  45|+          cout << endl;
+|    |  46|+      }
+|    |  47|+
+|    |  48|+    return 0;
+|  46|  49| }
+|  47|    |-void print(Node* temp)
+|    |  50|+void
+|    |  51|+print (Node * temp)
+|  48|  52| {
+|  49|    |-	while(temp!=NULL)
+|  50|    |-	{
+|  51|    |-		cout<<temp->data<<"\t";
+|  52|    |-		temp=temp->next;
+|  53|    |-	}
+|    |  53|+    while (temp != NULL)
+|    |  54|+      {
+|    |  55|+          cout << temp->data << "\t";
+|    |  56|+          temp = temp->next;
+|    |  57|+      }
+|  54|  58| }
+
+Linked List/Insert Node at given position in Linked List index start with 0.cpp
+|  10| Node*•InsertNth(Node*•head,int•data,int•n)
+|    | [NORMAL] CPPCleanBear:
+|    | 'InsertNth' not found in any directly #included header
+
+Linked List/Insert Node at given position in Linked List index start with 0.cpp
+|  47| void•print(Node*•temp)
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/insert value at the beginning of Linked List 3216.cpp
+|    |++++| /app/Linked List/insert value at the beginning of Linked List 3216.cpp
+|   4|   4| 
+|   5|   5| struct node
+|   6|   6| {
+|   7|    |-	int data;
+|   8|    |-	node* next;
+|    |   7|+    int data;
+|    |   8|+    node *next;
+|   9|   9| };
+|  10|    |-node* head=NULL;
+|    |  10|+node *head = NULL;
+|  11|  11| 
+|  12|    |-void print(void);
+|  13|    |-void insert(int);
+|  14|    |-int main()
+|    |  12|+void print (void);
+|    |  13|+void insert (int);
+|    |  14|+int
+|    |  15|+main ()
+|  15|  16| {
+|  16|    |-	int t;
+|  17|    |-	cout<<"How many numbers?  ";
+|  18|    |-	cin>>t;
+|  19|    |-	for(int i=0;i<t;i++)
+|  20|    |-	{
+|  21|    |-		int x;
+|  22|    |-		cout<<"Enter value: ";
+|  23|    |-		cin>>x;
+|  24|    |-		insert(x);
+|  25|    |-		print();
+|  26|    |-	}
+|  27|    |-	return 0;
+|    |  17|+    int t;
+|    |  18|+    cout << "How many numbers?  ";
+|    |  19|+    cin >> t;
+|    |  20|+    for (int i = 0; i < t; i++)
+|    |  21|+      {
+|    |  22|+          int x;
+|    |  23|+          cout << "Enter value: ";
+|    |  24|+          cin >> x;
+|    |  25|+          insert (x);
+|    |  26|+          print ();
+|    |  27|+      }
+|    |  28|+    return 0;
+|  28|  29| }
+|  29|    |-void print()
+|    |  30|+void
+|    |  31|+print ()
+|  30|  32| {
+|  31|    |-	node* temp=head;
+|  32|    |-	cout<<"List:: ";
+|  33|    |-	while(temp!=NULL)
+|  34|    |-	{
+|  35|    |-		cout<<temp->data<<"\t";
+|  36|    |-		temp=temp->next;
+|  37|    |-	}
+|  38|    |-	cout<<endl;
+|    |  33|+    node *temp = head;
+|    |  34|+    cout << "List:: ";
+|    |  35|+    while (temp != NULL)
+|    |  36|+      {
+|    |  37|+          cout << temp->data << "\t";
+|    |  38|+          temp = temp->next;
+|    |  39|+      }
+|    |  40|+    cout << endl;
+|  39|  41| }
+|  40|    |-void insert(int x)
+|    |  42|+void
+|    |  43|+insert (int x)
+|  41|  44| {
+|  42|    |-	node* temp=(node*)malloc(sizeof(node));
+|  43|    |-	(*temp).data=x;
+|  44|    |-	(*temp).next=head;
+|  45|    |-	head=temp;
+|    |  45|+    node *temp = (node *) malloc (sizeof (node));
+|    |  46|+    (*temp).data = x;
+|    |  47|+    (*temp).next = head;
+|    |  48|+    head = temp;
+|  46|  49| }
+
+Linked List/insert value at the beginning of Linked List 3216.cpp
+|  29| void•print()
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+
+Linked List/insert value at the beginning of Linked List 3216.cpp
+|  40| void•insert(int•x)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+
+Linked List/insert value at the beginning of Linked List 3216.cpp
+|  10| node*•head=NULL;
+|    | [NORMAL] CPPCleanBear:
+|    | static data 'head'
+
+Linked List/insert value at the beginning of Linked List 3216.cpp
+|  43| »   (*temp).data=x;
+|    | [MAJOR] CPPCheckBear (uninitdata):
+|    | Memory is allocated but not initialized: temp
+
+Linked List/insert value at the beginning of Linked List 3216.cpp
+|  44| »   (*temp).next=head;
+|    | [MAJOR] CPPCheckBear (uninitdata):
+|    | Memory is allocated but not initialized: temp
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|    |++++| /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|   4|   4| 
+|   5|   5| struct Node
+|   6|   6| {
+|   7|    |-	int data;
+|   8|    |-	Node* next;
+|    |   7|+    int data;
+|    |   8|+    Node *next;
+|   9|   9| };
+|  10|  10| 
+|  11|  11| void print(Node* head)
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|    |++++| /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|   8|   8| 	Node* next;
+|   9|   9| };
+|  10|  10| 
+|  11|    |-void print(Node* head)
+|    |  11|+void
+|    |  12|+print (Node * head)
+|  12|  13| {
+|  13|    |-	Node* temp=head;
+|  14|    |-	while(temp!=NULL)
+|  15|    |-	{
+|  16|    |-		cout<<temp->data<<endl;
+|  17|    |-		temp=temp->next;
+|  18|    |-	}
+|    |  14|+    Node *temp = head;
+|    |  15|+    while (temp != NULL)
+|    |  16|+      {
+|    |  17|+          cout << temp->data << endl;
+|    |  18|+          temp = temp->next;
+|    |  19|+      }
+|  19|  20| }
+|  20|  21| 
+|  21|  22| Node* insert(Node* head,int x)
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|    |++++| /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|  18|  18| 	}
+|  19|  19| }
+|  20|  20| 
+|  21|    |-Node* insert(Node* head,int x)
+|    |  21|+Node *
+|    |  22|+insert (Node * head, int x)
+|  22|  23| {
+|  23|    |-	//cout<<"x="<<x<<endl;
+|  24|    |-	Node* temp=(Node*)malloc(sizeof(Node));
+|  25|    |-	temp->data=x;
+|  26|    |-	temp->next=NULL;
+|  27|    |-	if(head==NULL)
+|  28|    |-	{
+|  29|    |-		//cout<<"Head=NULL"<<endl;
+|  30|    |-		head=temp;
+|  31|    |-		return head;
+|  32|    |-	}
+|  33|    |-	Node* temp1=head;
+|  34|    |-	int i=0;
+|  35|    |-	while(temp1->next!=NULL)
+|  36|    |-	{
+|  37|    |-		//cout<<"Head not NULL"<<endl;
+|  38|    |-		temp1=temp1->next;
+|  39|    |-		i++;
+|  40|    |-	}
+|  41|    |-//	cout<<i<<endl;
+|  42|    |-	temp1->next=temp;
+|  43|    |-	return head;
+|    |  24|+    //cout<<"x="<<x<<endl;
+|    |  25|+    Node *temp = (Node *) malloc (sizeof (Node));
+|    |  26|+    temp->data = x;
+|    |  27|+    temp->next = NULL;
+|    |  28|+    if (head == NULL)
+|    |  29|+      {
+|    |  30|+          //cout<<"Head=NULL"<<endl;
+|    |  31|+          head = temp;
+|    |  32|+          return head;
+|    |  33|+      }
+|    |  34|+    Node *temp1 = head;
+|    |  35|+    int i = 0;
+|    |  36|+    while (temp1->next != NULL)
+|    |  37|+      {
+|    |  38|+          //cout<<"Head not NULL"<<endl;
+|    |  39|+          temp1 = temp1->next;
+|    |  40|+          i++;
+|    |  41|+      }
+|    |  42|+//  cout<<i<<endl;
+|    |  43|+    temp1->next = temp;
+|    |  44|+    return head;
+|  44|  45| }
+|  45|  46| 
+|  46|  47| int main()
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|    |++++| /app/Linked List/insert Node at the end of LINKED LIST.cpp
+|  43|  43| 	return head;
+|  44|  44| }
+|  45|  45| 
+|  46|    |-int main()
+|    |  46|+int
+|    |  47|+main ()
+|  47|  48| {
+|  48|    |-	Node* head=NULL;
+|  49|    |-	head=insert(head,2);
+|    |  49|+    Node *head = NULL;
+|    |  50|+    head = insert (head, 2);
+|  50|  51| 
+|  51|    |-	head=insert(head,25);
+|  52|    |-    head=insert(head,14);
+|  53|    |-	head=insert(head,25);
+|  54|    |-	head=insert(head,14);
+|  55|    |-	head=insert(head,8);
+|  56|    |-	print(head);
+|  57|    |-	return 0;
+|    |  52|+    head = insert (head, 25);
+|    |  53|+    head = insert (head, 14);
+|    |  54|+    head = insert (head, 25);
+|    |  55|+    head = insert (head, 14);
+|    |  56|+    head = insert (head, 8);
+|    |  57|+    print (head);
+|    |  58|+    return 0;
+|  58|  59| }
+
+Linked List/insert Node at the end of LINKED LIST.cpp
+|  11| void•print(Node*•head)
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+
+Linked List/insert Node at the end of LINKED LIST.cpp
+|  21| Node*•insert(Node*•head,int•x)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Delete Node from given position in Linked List.cpp
+|    |++++| /app/Linked List/Delete Node from given position in Linked List.cpp
+|   4|   4| 
+|   5|   5| struct Node
+|   6|   6| {
+|   7|    |-	int data;
+|   8|    |-	Node* next;
+|    |   7|+    int data;
+|    |   8|+    Node *next;
+|   9|   9| };
+|  10|    |-Node* Delete(Node* head,int position);
+|  11|    |-void print(Node* head)
+|    |  10|+Node *Delete (Node * head, int position);
+|    |  11|+void
+|    |  12|+print (Node * head)
+|  12|  13| {
+|  13|    |-	Node* temp=head;
+|  14|    |-	while(temp!=NULL)
+|  15|    |-	{
+|  16|    |-		cout<<temp->data<<endl;
+|  17|    |-		temp=temp->next;
+|  18|    |-	}
+|  19|    |-	cout<<endl;
+|    |  14|+    Node *temp = head;
+|    |  15|+    while (temp != NULL)
+|    |  16|+      {
+|    |  17|+          cout << temp->data << endl;
+|    |  18|+          temp = temp->next;
+|    |  19|+      }
+|    |  20|+    cout << endl;
+|  20|  21| }
+|  21|  22| 
+|  22|  23| Node* insert(Node* head,int x)
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Delete Node from given position in Linked List.cpp
+|    |++++| /app/Linked List/Delete Node from given position in Linked List.cpp
+|  19|  19| 	cout<<endl;
+|  20|  20| }
+|  21|  21| 
+|  22|    |-Node* insert(Node* head,int x)
+|    |  22|+Node *
+|    |  23|+insert (Node * head, int x)
+|  23|  24| {
+|  24|    |-	//cout<<"x="<<x<<endl;
+|  25|    |-	Node* temp=(Node*)malloc(sizeof(Node));
+|  26|    |-	temp->data=x;
+|  27|    |-	temp->next=NULL;
+|  28|    |-	if(head==NULL)
+|  29|    |-	{
+|  30|    |-		//cout<<"Head=NULL"<<endl;
+|  31|    |-		head=temp;
+|  32|    |-		return head;
+|  33|    |-	}
+|  34|    |-	
+|  35|    |-	Node* temp1=head;
+|  36|    |-	int i=0;
+|  37|    |-	while(temp1->next!=NULL)
+|  38|    |-	{
+|  39|    |-		//cout<<"Head not NULL"<<endl;
+|  40|    |-		temp1=temp1->next;
+|  41|    |-		i++;
+|  42|    |-	}
+|  43|    |-//	cout<<i<<endl;
+|  44|    |-	temp1->next=temp;
+|  45|    |-	return head;
+|    |  25|+    //cout<<"x="<<x<<endl;
+|    |  26|+    Node *temp = (Node *) malloc (sizeof (Node));
+|    |  27|+    temp->data = x;
+|    |  28|+    temp->next = NULL;
+|    |  29|+    if (head == NULL)
+|    |  30|+      {
+|    |  31|+          //cout<<"Head=NULL"<<endl;
+|    |  32|+          head = temp;
+|    |  33|+          return head;
+|    |  34|+      }
+|    |  35|+
+|    |  36|+    Node *temp1 = head;
+|    |  37|+    int i = 0;
+|    |  38|+    while (temp1->next != NULL)
+|    |  39|+      {
+|    |  40|+          //cout<<"Head not NULL"<<endl;
+|    |  41|+          temp1 = temp1->next;
+|    |  42|+          i++;
+|    |  43|+      }
+|    |  44|+//  cout<<i<<endl;
+|    |  45|+    temp1->next = temp;
+|    |  46|+    return head;
+|  46|  47| }
+|  47|  48| 
+|  48|  49| int main()
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Delete Node from given position in Linked List.cpp
+|    |++++| /app/Linked List/Delete Node from given position in Linked List.cpp
+|  45|  45| 	return head;
+|  46|  46| }
+|  47|  47| 
+|  48|    |-int main()
+|    |  48|+int
+|    |  49|+main ()
+|  49|  50| {
+|  50|    |-	Node* head=NULL;
+|  51|    |-	head=insert(head,2);   //    2
+|  52|    |-	head=insert(head,25);  //    25
+|  53|    |-    head=insert(head,14);  //    14
+|  54|    |-	head=insert(head,29);  //    29
+|  55|    |-	head=insert(head,16);  //    16
+|  56|    |-	head=insert(head,82);  //    82
+|  57|    |-	head=insert(head,15);  //    15
+|  58|    |-	head=insert(head,21);  //    21
+|  59|    |-	print(head);
+|  60|    |-	head=Delete(head,3);
+|  61|    |-	print(head);
+|  62|    |-	head=Delete(head,0);
+|  63|    |-	print(head);
+|  64|    |-	head=Delete(head,5);
+|  65|    |-	print(head);
+|  66|    |-	
+|  67|    |-	return 0;
+|    |  51|+    Node *head = NULL;
+|    |  52|+    head = insert (head, 2);    //    2
+|    |  53|+    head = insert (head, 25);   //    25
+|    |  54|+    head = insert (head, 14);   //    14
+|    |  55|+    head = insert (head, 29);   //    29
+|    |  56|+    head = insert (head, 16);   //    16
+|    |  57|+    head = insert (head, 82);   //    82
+|    |  58|+    head = insert (head, 15);   //    15
+|    |  59|+    head = insert (head, 21);   //    21
+|    |  60|+    print (head);
+|    |  61|+    head = Delete (head, 3);
+|    |  62|+    print (head);
+|    |  63|+    head = Delete (head, 0);
+|    |  64|+    print (head);
+|    |  65|+    head = Delete (head, 5);
+|    |  66|+    print (head);
+|    |  67|+
+|    |  68|+    return 0;
+|  68|  69| }
+|  69|    |-Node* Delete(Node* head,int position)
+|    |  70|+Node *
+|    |  71|+Delete (Node * head, int position)
+|  70|  72| {
+|  71|    |-	Node* temp=head;
+|  72|    |-	if(position==0)
+|  73|    |-	{
+|  74|    |-		head=temp->next;
+|  75|    |-		free(temp);
+|  76|    |-		return head;
+|  77|    |-	}	
+|  78|    |-	for(int i=1;i<position;i++)
+|  79|    |-  {
+|  80|    |-      temp=temp->next;          
+|  81|    |-  }
+|  82|    |-  Node* temp1=temp->next; //use this temp1 variable to free the memory of deleted node
+|  83|    |-  
+|  84|    |-  temp->next=temp->next->next;
+|  85|    |-  free(temp1);  //after deleting time to free temp1
+|  86|    |-  return head;
+|  87|    |-	
+|    |  73|+    Node *temp = head;
+|    |  74|+    if (position == 0)
+|    |  75|+      {
+|    |  76|+          head = temp->next;
+|    |  77|+          free (temp);
+|    |  78|+          return head;
+|    |  79|+      }
+|    |  80|+    for (int i = 1; i < position; i++)
+|    |  81|+      {
+|    |  82|+          temp = temp->next;
+|    |  83|+      }
+|    |  84|+    Node *temp1 = temp->next;   //use this temp1 variable to free the memory of deleted node
+|    |  85|+
+|    |  86|+    temp->next = temp->next->next;
+|    |  87|+    free (temp1);               //after deleting time to free temp1
+|    |  88|+    return head;
+|    |  89|+
+|  88|  90| }
+
+Linked List/Delete Node from given position in Linked List.cpp
+|  11| void•print(Node*•head)
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+
+Linked List/Delete Node from given position in Linked List.cpp
+|  22| Node*•insert(Node*•head,int•x)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+
+Linked List/Delete Node from given position in Linked List.cpp
+|  69| Node*•Delete(Node*•head,int•position)
+|    | [NORMAL] CPPCleanBear:
+|    | 'Delete' not found in any directly #included header
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Bytelandian gold coins/Bytelandian gold coins .cpp
+|    |++++| /app/Bytelandian gold coins/Bytelandian gold coins .cpp
+|   3|   3| #define ll long long int
+|   4|   4| using namespace std;
+|   5|   5| 
+|   6|    |-int a[1000000]={0};
+|    |   6|+int a[1000000] = { 0 };
+|   7|   7| 
+|   8|    |-ll rec(ll n)
+|    |   8|+ll
+|    |   9|+rec (ll n)
+|   9|  10| {
+|  10|    |-	if(n<12)  return n;
+|  11|    |-	if(n/2 > 1000000 )
+|  12|    |-	{
+|  13|    |-		ll n_by2=rec(n/2);
+|  14|    |-		ll n_by3=rec(n/3);
+|  15|    |-		ll n_by4=rec(n/4);
+|  16|    |-		ll sum=n_by2+n_by3+n_by4;
+|  17|    |-		if(sum<=n)
+|  18|    |-			return n;
+|  19|    |-		return sum;
+|  20|    |-	}
+|  21|    |-	if (a[n/2]==0)
+|  22|    |-		a[n/2]=rec(n/2);
+|  23|    |-	if (a[n/3]==0)
+|  24|    |-		a[n/3]=rec(n/3);
+|  25|    |-	if (a[n/4]==0)
+|  26|    |-		a[n/4]=rec(n/4);
+|  27|    |-	ll sum=a[n/2] + a[n/3] + a[n/4];
+|  28|    |-	if(sum<=n)
+|  29|    |-		return n;
+|  30|    |-	return sum;
+|  31|    |-	
+|    |  11|+    if (n < 12)
+|    |  12|+        return n;
+|    |  13|+    if (n / 2 > 1000000)
+|    |  14|+      {
+|    |  15|+          ll n_by2 = rec (n / 2);
+|    |  16|+          ll n_by3 = rec (n / 3);
+|    |  17|+          ll n_by4 = rec (n / 4);
+|    |  18|+          ll sum = n_by2 + n_by3 + n_by4;
+|    |  19|+          if (sum <= n)
+|    |  20|+              return n;
+|    |  21|+          return sum;
+|    |  22|+      }
+|    |  23|+    if (a[n / 2] == 0)
+|    |  24|+        a[n / 2] = rec (n / 2);
+|    |  25|+    if (a[n / 3] == 0)
+|    |  26|+        a[n / 3] = rec (n / 3);
+|    |  27|+    if (a[n / 4] == 0)
+|    |  28|+        a[n / 4] = rec (n / 4);
+|    |  29|+    ll sum = a[n / 2] + a[n / 3] + a[n / 4];
+|    |  30|+    if (sum <= n)
+|    |  31|+        return n;
+|    |  32|+    return sum;
+|    |  33|+
+|  32|  34| }
+|  33|  35| 
+|  34|  36| int main()
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Bytelandian gold coins/Bytelandian gold coins .cpp
+|    |++++| /app/Bytelandian gold coins/Bytelandian gold coins .cpp
+|  31|  31| 	
+|  32|  32| }
+|  33|  33| 
+|  34|    |-int main()
+|    |  34|+int
+|    |  35|+main ()
+|  35|  36| {
+|  36|    |-	ios_base::sync_with_stdio(false);
+|  37|    |-//	cin.tie(NULL);
+|  38|    |-	
+|  39|    |-	int t=10;
+|  40|    |-	while(t--)
+|  41|    |-	{
+|  42|    |-		ll n;  cin>>n;
+|  43|    |-		cout<<rec(n)<<"\n";
+|  44|    |-	}
+|  45|    |-	return 0;
+|    |  37|+    ios_base::sync_with_stdio (false);
+|    |  38|+//  cin.tie(NULL);
+|    |  39|+
+|    |  40|+    int t = 10;
+|    |  41|+    while (t--)
+|    |  42|+      {
+|    |  43|+          ll n;
+|    |  44|+          cin >> n;
+|    |  45|+          cout << rec (n) << "\n";
+|    |  46|+      }
+|    |  47|+    return 0;
+|  46|  48| }
+|  47|    |-
+|  48|    |-
+|  49|    |-
+
+Bytelandian gold coins/Bytelandian gold coins .cpp
+|   8| ll•rec(ll•n)
+|    | [NORMAL] CPPCleanBear:
+|    | 'rec' not found in any directly #included header
+
+Bytelandian gold coins/Bytelandian gold coins .cpp
+|   6| int•a[1000000]={0};
+|    | [NORMAL] CPPCleanBear:
+|    | static data 'a'
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Reverse the Linked List.cpp
+|    |++++| /app/Linked List/Reverse the Linked List.cpp
+|   2|   2| #include <cstdlib>
+|   3|   3| using namespace std;
+|   4|   4| 
+|   5|    |-struct Node{
+|   6|    |-	int data;
+|   7|    |-	Node* next;
+|    |   5|+struct Node
+|    |   6|+{
+|    |   7|+    int data;
+|    |   8|+    Node *next;
+|   8|   9| };
+|   9|  10| 
+|  10|  11| Node* insert(Node* head,int position,int value)
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Reverse the Linked List.cpp
+|    |++++| /app/Linked List/Reverse the Linked List.cpp
+|   7|   7| 	Node* next;
+|   8|   8| };
+|   9|   9| 
+|  10|    |-Node* insert(Node* head,int position,int value)
+|    |  10|+Node *
+|    |  11|+insert (Node * head, int position, int value)
+|  11|  12| {
+|  12|    |-	Node* temp=head;
+|  13|    |-	Node* ne=(Node*)malloc(sizeof(Node));
+|  14|    |-	ne->data=value;
+|  15|    |-	ne->next=NULL;
+|  16|    |-	if(position==0)
+|  17|    |-	{
+|  18|    |-		ne->next=head;
+|  19|    |-		head=ne;
+|  20|    |-		return head;
+|  21|    |-	}
+|  22|    |-	Node* prev = NULL;
+|  23|    |-	for(int i=0;i<position;i++)
+|  24|    |-	{
+|  25|    |-		prev=temp;
+|  26|    |-		temp=temp->next;
+|  27|    |-	}
+|  28|    |-	prev->next=ne;
+|  29|    |-	ne->next=temp;
+|  30|    |-	return head;
+|  31|    |-	
+|    |  13|+    Node *temp = head;
+|    |  14|+    Node *ne = (Node *) malloc (sizeof (Node));
+|    |  15|+    ne->data = value;
+|    |  16|+    ne->next = NULL;
+|    |  17|+    if (position == 0)
+|    |  18|+      {
+|    |  19|+          ne->next = head;
+|    |  20|+          head = ne;
+|    |  21|+          return head;
+|    |  22|+      }
+|    |  23|+    Node *prev = NULL;
+|    |  24|+    for (int i = 0; i < position; i++)
+|    |  25|+      {
+|    |  26|+          prev = temp;
+|    |  27|+          temp = temp->next;
+|    |  28|+      }
+|    |  29|+    prev->next = ne;
+|    |  30|+    ne->next = temp;
+|    |  31|+    return head;
+|    |  32|+
+|  32|  33| }
+|  33|    |-Node* reverse(Node* head)
+|    |  34|+Node *
+|    |  35|+reverse (Node * head)
+|  34|  36| {
+|  35|    |-	Node* temp=head;
+|  36|    |-	Node* prev=NULL;
+|  37|    |-	Node* after=head;
+|  38|    |-//	cout<<endl<<after->data<<endl;
+|  39|    |-	//cout<<"\nenter in reverse\n";
+|    |  37|+    Node *temp = head;
+|    |  38|+    Node *prev = NULL;
+|    |  39|+    Node *after = head;
+|    |  40|+//  cout<<endl<<after->data<<endl;
+|    |  41|+    //cout<<"\nenter in reverse\n";
+|  40|  42| 
+|  41|    |-	while(temp!=NULL)
+|  42|    |-	{
+|  43|    |-		after=after->next;
+|  44|    |-		temp->next=prev;
+|  45|    |-		prev=temp;
+|  46|    |-		temp=after;
+|  47|    |-	}
+|  48|    |-	head=prev;
+|  49|    |-	//(head==NULL)?cout<<"null\n": cout<<"not null\n";
+|  50|    |-	return head;
+|    |  43|+    while (temp != NULL)
+|    |  44|+      {
+|    |  45|+          after = after->next;
+|    |  46|+          temp->next = prev;
+|    |  47|+          prev = temp;
+|    |  48|+          temp = after;
+|    |  49|+      }
+|    |  50|+    head = prev;
+|    |  51|+    //(head==NULL)?cout<<"null\n": cout<<"not null\n";
+|    |  52|+    return head;
+|  51|  53| }
+|  52|    |-void print(Node* head)
+|    |  54|+void
+|    |  55|+print (Node * head)
+|  53|  56| {
+|  54|    |-	//cout<<"enter in print\n";
+|  55|    |-	Node* temp=head;
+|  56|    |-	while(temp!=NULL)
+|  57|    |-	{
+|  58|    |-		cout<<temp->data<<"  ";
+|  59|    |-		temp=temp->next;
+|  60|    |-	}
+|  61|    |-	cout<<endl<<endl;
+|  62|    |-	//cout<<"\nexiting print"<<endl;
+|    |  57|+    //cout<<"enter in print\n";
+|    |  58|+    Node *temp = head;
+|    |  59|+    while (temp != NULL)
+|    |  60|+      {
+|    |  61|+          cout << temp->data << "  ";
+|    |  62|+          temp = temp->next;
+|    |  63|+      }
+|    |  64|+    cout << endl << endl;
+|    |  65|+    //cout<<"\nexiting print"<<endl;
+|  63|  66| }
+|  64|  67| 
+|  65|  68| int main()
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Reverse the Linked List.cpp
+|    |++++| /app/Linked List/Reverse the Linked List.cpp
+|  62|  62| 	//cout<<"\nexiting print"<<endl;
+|  63|  63| }
+|  64|  64| 
+|  65|    |-int main()
+|    |  65|+int
+|    |  66|+main ()
+|  66|  67| {
+|  67|    |-	Node* head=NULL;
+|  68|    |-	
+|  69|    |-	head=insert(head,0,2);  
+|  70|    |-	head=insert(head,1,5); 
+|  71|    |-	head=insert(head,2,9); 
+|  72|    |-	head=insert(head,0,1);
+|  73|    |-	head=insert(head,2,4);
+|  74|    |-	head=insert(head,4,6);
+|  75|    |-	head=insert(head,2,3);
+|  76|    |-	head=insert(head,6,8);
+|  77|    |-	head=insert(head,6,7);
+|  78|    |-	
+|  79|    |-	print(head);
+|  80|    |-	
+|  81|    |-	head=reverse(head);
+|  82|    |-	//cout<<"return from reverse"<<endl;
+|  83|    |-	print(head);
+|  84|    |-	
+|  85|    |-	return 0;
+|    |  68|+    Node *head = NULL;
+|    |  69|+
+|    |  70|+    head = insert (head, 0, 2);
+|    |  71|+    head = insert (head, 1, 5);
+|    |  72|+    head = insert (head, 2, 9);
+|    |  73|+    head = insert (head, 0, 1);
+|    |  74|+    head = insert (head, 2, 4);
+|    |  75|+    head = insert (head, 4, 6);
+|    |  76|+    head = insert (head, 2, 3);
+|    |  77|+    head = insert (head, 6, 8);
+|    |  78|+    head = insert (head, 6, 7);
+|    |  79|+
+|    |  80|+    print (head);
+|    |  81|+
+|    |  82|+    head = reverse (head);
+|    |  83|+    //cout<<"return from reverse"<<endl;
+|    |  84|+    print (head);
+|    |  85|+
+|    |  86|+    return 0;
+|  86|  87| }
+
+Linked List/Reverse the Linked List.cpp
+|  10| Node*•insert(Node*•head,int•position,int•value)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+
+Linked List/Reverse the Linked List.cpp
+|  33| Node*•reverse(Node*•head)
+|    | [NORMAL] CPPCleanBear:
+|    | 'reverse' not found in any directly #included header
+
+Linked List/Reverse the Linked List.cpp
+|  52| void•print(Node*•head)
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Functions/copy replace fill.cpp
+|    |++++| /app/Functions/copy replace fill.cpp
+|   4|   4| #include<algorithm>
+|   5|   5| #include<string.h>
+|   6|   6| using namespace std;
+|   7|    |-int main()
+|    |   7|+int
+|    |   8|+main ()
+|   8|   9| {
+|   9|    |-	int myints[] = { 10, 20, 30, 30, 20, 10, 10, 20 };
+|  10|    |-    vector<int> myvector (myints, myints+8);            // 10 20 30 30 20 10 10 20
+|  11|    |-                                                                                                //-----------REPLACE----------
+|  12|    |-    replace(myvector.begin(), myvector.begin()+5,20, 99); // 10 99 30 30 99 10 10 99
+|    |  10|+    int myints[] = { 10, 20, 30, 30, 20, 10, 10, 20 };
+|    |  11|+    vector < int >myvector (myints, myints + 8);    // 10 20 30 30 20 10 10 20
+|    |  12|+    //-----------REPLACE----------
+|    |  13|+    replace (myvector.begin (), myvector.begin () + 5, 20, 99); // 10 99 30 30 99 10 10 99
+|  13|  14| 
+|  14|  15|     cout << "myvector contains:";
+|  15|  16|     for(vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Functions/copy replace fill.cpp
+|    |++++| /app/Functions/copy replace fill.cpp
+|  12|  12|     replace(myvector.begin(), myvector.begin()+5,20, 99); // 10 99 30 30 99 10 10 99
+|  13|  13| 
+|  14|  14|     cout << "myvector contains:";
+|  15|    |-    for(vector<int>::iterator it=myvector.begin(); it!=myvector.end(); ++it)
+|  16|    |-    cout << ' ' << *it;
+|    |  15|+    for (vector < int >::iterator it = myvector.begin ();
+|    |  16|+         it != myvector.end (); ++it)
+|    |  17|+        cout << ' ' << *it;
+|  17|  18|     cout << '\n';
+|  18|    |-	
+|  19|    |-	return 0;
+|    |  19|+
+|    |  20|+    return 0;
+|  20|  21| }
+|  21|  22| 
+|  22|  23| /*    
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Functions/copy replace fill.cpp
+|    |++++| /app/Functions/copy replace fill.cpp
+|  52|  52| 
+|  53|  53|   return 0;
+|  54|  54| }  */
+|  55|    |-
+|  56|    |-
+|  57|    |-
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Linked List/Insert node at given position in Linked List index start with 1.cpp
+|    |++++| /app/Linked List/Insert node at given position in Linked List index start with 1.cpp
+|   2|   2| #include<cstdlib>
+|   3|   3| using namespace std;
+|   4|   4| 
+|   5|    |-struct Node{
+|   6|    |-	int data;
+|   7|    |-	Node* next;
+|    |   5|+struct Node
+|    |   6|+{
+|    |   7|+    int data;
+|    |   8|+    Node *next;
+|   8|   9| };
+|   9|    |-void print(Node*);
+|  10|    |-Node* insert(Node* head,int data,int n)
+|    |  10|+void print (Node *);
+|    |  11|+Node *
+|    |  12|+insert (Node * head, int data, int n)
+|  11|  13| {
+|  12|    |-	Node* temp=(Node*)malloc(sizeof(Node));
+|  13|    |-	temp->data=data;
+|  14|    |-	temp->next=NULL;
+|  15|    |-	
+|  16|    |-	if(n==1)
+|  17|    |-	{
+|  18|    |-		temp->next=head;
+|  19|    |-		head=temp;
+|  20|    |-		return head;
+|  21|    |-	}
+|  22|    |-	Node* temp1=head;
+|  23|    |-	for(int i=1;i<n-1;i++)
+|  24|    |-	{
+|  25|    |-		temp1=temp1->next;
+|  26|    |-	}
+|  27|    |-	temp->next=temp1->next;
+|  28|    |-	temp1->next=temp;
+|  29|    |-	return head;
+|    |  14|+    Node *temp = (Node *) malloc (sizeof (Node));
+|    |  15|+    temp->data = data;
+|    |  16|+    temp->next = NULL;
+|    |  17|+
+|    |  18|+    if (n == 1)
+|    |  19|+      {
+|    |  20|+          temp->next = head;
+|    |  21|+          head = temp;
+|    |  22|+          return head;
+|    |  23|+      }
+|    |  24|+    Node *temp1 = head;
+|    |  25|+    for (int i = 1; i < n - 1; i++)
+|    |  26|+      {
+|    |  27|+          temp1 = temp1->next;
+|    |  28|+      }
+|    |  29|+    temp->next = temp1->next;
+|    |  30|+    temp1->next = temp;
+|    |  31|+    return head;
+|  30|  32| }
+|  31|    |-int main()
+|    |  33|+int
+|    |  34|+main ()
+|  32|  35| {
+|  33|    |-	Node* head=NULL;
+|  34|    |-	head=insert(head,2,1);  // 2
+|  35|    |-	head=insert(head,9,1);  // 9 2
+|  36|    |-	head=insert(head,4,2);  // 9 4 2
+|  37|    |-	head=insert(head,5,4);  // 9 4 2 5
+|  38|    |-	print(head);
+|  39|    |-	return 0;
+|    |  36|+    Node *head = NULL;
+|    |  37|+    head = insert (head, 2, 1); // 2
+|    |  38|+    head = insert (head, 9, 1); // 9 2
+|    |  39|+    head = insert (head, 4, 2); // 9 4 2
+|    |  40|+    head = insert (head, 5, 4); // 9 4 2 5
+|    |  41|+    print (head);
+|    |  42|+    return 0;
+|  40|  43| }
+|  41|    |-void print(Node* temp)
+|    |  44|+void
+|    |  45|+print (Node * temp)
+|  42|  46| {
+|  43|    |-	while(temp!=NULL)
+|  44|    |-	{
+|  45|    |-		cout<<temp->data<<"\t";
+|  46|    |-		temp=temp->next;
+|  47|    |-	}
+|    |  47|+    while (temp != NULL)
+|    |  48|+      {
+|    |  49|+          cout << temp->data << "\t";
+|    |  50|+          temp = temp->next;
+|    |  51|+      }
+|  48|  52| }
+
+Linked List/Insert node at given position in Linked List index start with 1.cpp
+|  10| Node*•insert(Node*•head,int•data,int•n)
+|    | [NORMAL] CPPCleanBear:
+|    | 'insert' not found in any directly #included header
+
+Linked List/Insert node at given position in Linked List index start with 1.cpp
+|  41| void•print(Node*•temp)
+|    | [NORMAL] CPPCleanBear:
+|    | 'print' not found in any directly #included header
+|    | [NORMAL] GNUIndentBear:
+|    | Indentation can be improved.
+|----|    | /app/Functions/2D Vector Pair.cpp
+|    |++++| /app/Functions/2D Vector Pair.cpp
+|   2|   2| #include <iostream>
+|   3|   3| #include <utility>
+|   4|   4| #include <vector>
+|   5|    |- 
+|    |   5|+
+|   6|   6| using namespace std;
+|   7|    |- 
+|   8|    |-int main(int argc, char** argv) {
+|   9|    |-    
+|  10|    |-    pair<int,int> apair;
+|  11|    |-    vector<pair<int,int> > v_temp;
+|  12|    |-    vector< vector<pair<int,int> > > pair2dvector;
+|  13|    |- 
+|  14|    |-    for (int i = 0; i < 10; i++) {
+|  15|    |-        for (int j = 0; j < 10; j++) {
+|  16|    |-            apair.first = i;
+|  17|    |-            apair.second = j;
+|  18|    |-            v_temp.push_back(apair);
+|  19|    |-        }
+|  20|    |-        pair2dvector.push_back(v_temp);
+|  21|    |-        v_temp.clear();
+|  22|    |-    }
+|  23|    |- 
+|  24|    |-    for (vector< vector<pair<int,int> > >::iterator it = pair2dvector.begin(); it != pair2dvector.end(); ++it) {
+|  25|    |-        v_temp = *it;
+|  26|    |-        for (vector<pair<int,int> >::iterator it2 = v_temp.begin(); it2 != v_temp.end(); ++it2) {
+|  27|    |-            apair = *it2;
+|  28|    |-            cout << "(" << apair.first << "," << apair.second << ") ; ";
+|  29|    |-        }
+|  30|    |-        cout << '\n';
+|  31|    |-    }
+|  32|    |- 
+|    |   7|+
+|    |   8|+int
+|    |   9|+main (int argc, char **argv)
+|    |  10|+{
+|    |  11|+
+|    |  12|+    pair < int, int >apair;
+|    |  13|+    vector < pair < int, int >>v_temp;
+|    |  14|+    vector < vector < pair < int, int >>>pair2dvector;
+|    |  15|+
+|    |  16|+    for (int i = 0; i < 10; i++)
+|    |  17|+      {
+|    |  18|+          for (int j = 0; j < 10; j++)
+|    |  19|+            {
+|    |  20|+                apair.first = i;
+|    |  21|+                apair.second = j;
+|    |  22|+                v_temp.push_back (apair);
+|    |  23|+            }
+|    |  24|+          pair2dvector.push_back (v_temp);
+|    |  25|+          v_temp.clear ();
+|    |  26|+      }
+|    |  27|+
+|    |  28|+    for (vector < vector < pair < int, int >>>::iterator it =
+|    |  29|+         pair2dvector.begin (); it != pair2dvector.end (); ++it)
+|    |  30|+      {
+|    |  31|+          v_temp = *it;
+|    |  32|+          for (vector < pair < int, int >>::iterator it2 = v_temp.begin ();
+|    |  33|+               it2 != v_temp.end (); ++it2)
+|    |  34|+            {
+|    |  35|+                apair = *it2;
+|    |  36|+                cout << "(" << apair.first << "," << apair.second << ") ; ";
+|    |  37|+            }
+|    |  38|+          cout << '\n';
+|    |  39|+      }
+|    |  40|+
+|  33|  41|     return 0;
+|  34|  42| }
+Executing section yaml...

